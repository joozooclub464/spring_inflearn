spring
================================================================
#day01 - 스프링 프레임워크

프레임워크
	뼈대나 근간을 이루는 코드들의 묶음
	개발자는 각 개개인의 능력차이가 큰 직종이고, 개발자 구성에 따라 프로젝트의 
	결과 역시 큰 차이를 낳는다. 이런 상황을 극복하기 위한 코드의 결과물이
	바로 프레임워크이다. 프로그램의 기본 흐름이나 구조를 정하고 모든 팀원들이
	이 구조에 자신의 코드를 추가하는 방법으로 개발.
	
프레임워크의 장점
	일정한 개발 품질 보장
	개발 시간 단축
	반쯤 완성된 상태에서 필요한 부분을 조립하는 형태의 개발

스프링 프레임워크
	경량 프레임워크(light-weight)
	특정 기능을 위주로 간단한 JAR파일 등을 이용해서
	모든 개발이 가능하도록 구성되어 있다.

스프링 프레임워크의 장점
	복잡함에 반기를 들어서 만들어진 프레임워크
	프로젝트 전체 구조를 설계할 때 유용한 프레임워크
	다른 프레임워크들의 포용(여러 프레임워크를 혼용해서 사용 가능 - 접착성)
	개발 생산성과 개발도구의 지원

스프링 프레임워크의 특징
	-POJO 기반의 구성
	-의존성 주입(DI)를 통한 객체 간의 관계 구성
	-AOP(Aspect-Oriented-Programing) 지원
	-편리한 MVC 구조
	-WAS 종속적이지 않은 개발 환경

POJO(Plain Old Java Object)
	오래된 방식의 간단한 자바 객체 라는 의미 
	JAVA 코드에서 일반적으로 객체를 구성하는 방식을 스프링 프레임워크에서 그대로 사용할 수 있다는 말이다.
	
의존성 주입(DI)
	Dependency Injection
	의존성(Dependency)이란 하나의 객체가 다른 객체 없이 제대로 된 역할을
	할 수 없다는 것을 의미한다. 예를 들어 a 객체가 b 객체 없이 동작이 
	불가능한 상황을 'a가 b에 의존적이다'라고 표현한다.
	
	의존성을 주입하면 의존성이 줄어든다!!!
	(기존에는 없던 의존성을 외부에서 주입해주면 이 방법이 오히려 내부에서 하는것보다 의존성이 줄어든다)

	주입(Injection)은 말 그대로 외부에서 밀어 넣는것을 의미한다. 예를 들어
	a 객체가 필요로 하는 b 객체를 외부에서 밀어 넣는것을 의미한다. 주입을 받는
	입장에서는 어떤 객체인지 신경 쓸 필요가 없고 어떤 객체에 의존하든 자신의
	역할은 변하지 않게 된다.

	*의존
	a---------------> b
	a객체에서 b객체를 직접 생성

	*의존성 주입
	a----->ApplicationContext<----- b
	a객체는 b가 필요하다는 신호만 보내고, b객체를 주입하는 것은 외부에서 이루어짐

	스프링 프레임워크에서는 ApplicationContext가 필요한 객체들을 생성하고 의존성 주입까지 해주는 역할.(Context:문맥)
	따라서 개발자들은 기존의 프로그래밍과 달리 객체와 객체를 분리해서 생성하고, 
	이러한 객체들을 엮는(wiring) 작업의 형태로 개발하게 된다.
	ApplicationContext가 관리하는 객체들을 빈(bean)이라 부르고, 
	빈과 빈 사이의 의존 관계를 처리하는 방식으로 XML 설정, 어노테이션 설정,
	JAVA설정 방식을 이용할 수 있다.(미리 설정하기)
	
AOP(Aspect Oriented Programing)
	관점 지향 프로그래밍
	보안이나 로그, 트랜잭션과 같이 비즈니스 로직은
	아니지만 반드시 처리가 필요한 부분을 횡단 관심사(cross-concern)라고 한다.
	스프링 프레임워크는 이러한 횡단 관심사를 분리해서 제작하는 것이 가능하고
	횡단 관심사를 모듈로 분리하는 프로그래밍을 AOP라고 한다.
	1) 반복적인 코드 제거하여 핵심 비즈니스 로직에만 집중하여 코드 개발
	2) 각 프로젝트마다 다른 관심사 적용시 코드 수정 최소화
	3) 원하는 관심사의 유지보수가 수월한 코드 구성이 가능

트랜잭션의 지원	
	DB작업시 어노테이션이나 XML로 트랜잭션 관리를 설정할 수 있다.

STS(Spring Tool Suite) 설치

프로젝트 생성(Maven)
	Maven은 프로젝트 관리 도구의 일종이다. Maven은 필요한 라이브러리를
	특정 문서(pom.xml)에 정의해 놓으면 내가 사용할 라이브러리 뿐만 아니라
	해당 라이브러리가 작동하는데에 필요한 다른 라이브러리들 까지 관리하여 
	네트워크를 통해서 자동으로 다운받아 준다.


Lombok 라이브러리 설치
	이클립스와 스프링 플러그인 만으로도 스프링 개발이 가능하지만, 
	Lombok(롬복)을 이용하면 Java 개발시 getter/setter, toString(),
	생성자 등을 자동으로 생성해주므로 설치해서 사용하면 편리하다.
================================================================
#day02 - 스프링 구동 원리

프로젝트 기본 구성 요소
	src/main/java		작성되는 코드의 경로
	src/main/resource	실행할 때 참고하는 기본 경로(설정 파일)
	src/test/java		테스트 코드를 넣는 경로
	src/test/resource	테스트 관련 설정 파일 보관 경로

웹과 관련된 스프링 설정 파일
src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml

bean 관리용 스프링 설정 파일
src/main/webapp/WEB-INF/spring/root-context.xml
=> 주입해줘야 하는 파일의 경우 여기에 적힌 태그들을 참고해서 외부에서 객체를 찾아서 주입해줌

Tomcat의 web.xml파일
WEB-INF/web.xml

템플릿 프로젝트의 jsp 파일 경로
src/main/webapp/WEB-INF/views

Maven이 사용하는 pom.xml
ex00/pom.xml

* WEB-INF : INF가 붙어있는 폴더는 보안이 걸려있는 폴더임(직접 접근하는것이 불가능하게 막혀있는 폴더임)

라이브러리 오류 발생시 C 드라이브 > 사용자 > 계정폴더 > .m2폴더 안의 내용 싹 지우기
> 이클립스 재시작 > 프로젝트 우클릭 > Maven > Update Project
---------------------------------------------------------------
의존성 주입 테스트(연습)
	호텔, 레스토랑 안에 셰프 객체를 주입하는 예제
	생성자, setter 메소드를 이용한 주입으로 의존성 주입 구현
	설정 방식은 XML이나 어노테이션을 이용해서 처리

스프링 프레임워크 동작시 생기는 일
	1. 스프링 프레임워크가 시작되면서 먼저 스프링이 사용하는 메모리 영역을 만든다.
	2. 스프링 내부적으로 ApplicationContext라는 이름의 객체가 만들어진다.
	3. 스프링은 자신이 생성하고 관리해야 하는 객체들에 대한 설정을 알아야 하고
	   이 설정파일은 root-context.xml 이라는 파일로 만들어져 있다.
	4. root-context.xml에 설정되어 있는 <context:component-scan>
	   태그의 내용을 통해서 com.koreait.sample 패키지를 스캔하기 시작한다.
	5. 해당 패키지에 있는 클래스들 중에서 스프링이 사용하는 @Component라는
	   어노테이션이 존재하는 클래스의 인스턴스를 생성한다. 
	6. Restaurant 객체는 Chef 객체가 필요하다는 어노테이션(@Autowired) 설정이 있으므로
	   Chef 객체의 레퍼런스를 Restaurant 객체에 주입한다.

테스트 환경(JUnit)
	자바 프로그래밍 언어용 유닛 테스트 프레임워크
	가장 많이 사용되는 테스트 환경
	assert???() (이런 이름의 메소드가 가장 많이 사용됨)
	테스트 성공시 JUnit GUI 창에 녹색으로 표시 / 실패시 적색으로 표시
	하나하나의 케이스별로(단위로 나누어서) 테스트를 하는 단위 테스트 도구

테스트 환경 구축하기
	1. 테스트 클래스 위쪽에 어노테이션 추가
		@RunWith(SpringJUnit4ClassRunner.class)
	2. 내부에 테스트용 메소드 선언
		- 내부에는 우리가 테스트 해볼 로직을 구현
	3. 테스트용 메소드 위에 어노테이션 추가
		@Test
	4. 테스트 실행
		테스트클래스 > 우클릭 > Run As > JUnit Test 

spring이 Component붙은 것을 찾으려면 root-context.xml에 등록되어있는 beans중에서 component를 찾음
-> ie)root-context.xml 의 beans 안에 component를 등록해줘야 함
-----------------------------------------------------------------------------
*어노테이션 정리

@Component 
	spring에게 해달 클래스가 스프링에서 관리해야 하는 대상임을 표시하는 어노테이션
	주입해줘야 할 것을 스프링에게 알려주는 어노테이션.

@Data
	Lombok의 setter,getter,toString() 등을 자동으로 생성해주는 어노테이션

@AllArgsConstructor
	인스턴스 변수로 선언된 모든 것을 파라미터로 받는 생성자를 작성한다.
	등록되어있는 Chef타입의 chef 하나를 만들어서 주입해줌.

@RequiredArgsConstructor
	특정 변수를 위한 생성자를 만들 때 작성. final이 붙거나 @NonNull이 붙은 인스턴스 변수에 대한 생성자를 만들어낸다.
	ie) 어떤건 주입이 필요하고 어떤건 필요 없을 때(주입이 일어나지 않게 할 때)

@NonNull
	@RequiredArgsConstructor가 NonNull에 대한 chef 하나를 받아오는 생성자로 생성이 됨

@Setter(onMethod_ = @Autowired)
	set chef를 이용해서 주입할건데, 자동으로 연결되어 있는걸로 주입해줘

@RunWith(SpringJUnit4ClassRunner.class)
	지정된 클래스나 문자열을 이용해서 필요한 객체들을 스프링 내에 객체로 등록

@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
	rootcontext가 어디있는지 test클래스에서 알려주는 것

@Log4j
	롬복에 존재하는 로그를 찍기 위한 라이브러리

@Test
	JUnit에서 테스트 대상임을 표시(반드시 public으로 만들어야 함)
-----------------------------------------------------------------------------

================================================================
#day03 - DB연동(Mybatis) 

Oracle 연동
	spring 은 ojdbc6를 따로 추가해줬기 때문에 
	프로젝트 우클릭 > Build Path > Configuration Build Path > Deployment Assembly 
	> Add > Java Build Path Entries > ojdbc6.jar 선택 > Apply

Spring - Mybatis
	SQL이 짧고 간결한 경우에는 어노테이션을 이용해서 쿼리문을 작성해준다.
	SQL이 복잡하거나 길어지는 경우에는 어노테이션보다 XML을 이용하는 것이 좋다.
	Mybatis-Spring의 경우 Mapper 인터페이스와 XML을 연동해서 동시에
	이용할 수 있다. 인터페이스객체.메소드()를 사용하는 순간 해당하는 인터페이스의
	경로를 namespace로 가지고 있는 xml 파일로 찾아가서 메소드명과 동일한
	id의 쿼리문을 수행하여 결과로 돌려준다.

	Mybatis는 내부적으로 JDBC의 PreparedStatement를 이용해서 SQL을
	처리한다. 따라서 SQL에 전달되는 파라미터는 JDBC에서와 같이 ? 로 치환되어서
	처리된다. 복잡한 SQL의 경우 ?로 나오는 값이 제대로 전달 되었는지 확인하기가
	쉽지 않고 실행한 SQL의 내용을 정확히 확인하기 어렵기 때문에
	log4jdbc-log4j2 라이브러리를 사용하여 어떤 값인지를 확인할 수 있다.

로그 레벨 설정
	테스트 코드 실행시 많은 양의 로그가 출력되기 때문에 불편할 수 있다.
	이럴 때에는 로그의 레벨을 이용해서 수정해 준다.
	resources/log4j.xml 파일에 있는 level 태그를 수정한다.
-----------------------------------------------------------------------------
* Oracle DB 비밀번호 만료

oracle 계정 비밀번호는 180일이 지나면 만료됨 
이 때 cmd > sqlplus "/as sysdba" > 오라클 계정에 접속 후 >
	계정락풀어주기
    		SQL> alter user 계정명 account unlock;

	비밀번호 변경
     		SQL> alter user 계정명 identified by 새비밀번호;

비밀번호 만료 방지 
	ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;
-----------------------------------------------------------------------------
hikariCP
	JDBC Connection Pool 라이브러리
	root-context.xml 안에 bean으로 설정을 등록해둠
		<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
			<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:XE"/>
			<property name="username" value="계정아이디"/>
			<property name="password" value="계정비밀번호"/>
		</bean>
		<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
			<constructor-arg ref="hikariConfig"/> <!-- 어떤 빈을 참고해서 만들어야 하는지 설정해줌. -->
		</bean>

*root-context.xml > bean에 설정했다 == 스프링이 관리한다 == 객체를 만들어서 주입받는다

*SqlFactory 등록 
	root-context.xml 에
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">	
			<property name="dataSource" ref="dataSource" />
		</bean>
*Scan 등록
	root-context.xml 에
		<mybatis-spring:scan base-package="com.springboard.mapper"/>
	: com.springboard.mapper 를 스캔해서 mapper 패키지를 찾는다.




*Mapper 인터페이스
	Mapper 를 작성하는 작업은 XML을 이용할 수도 있지만,
	최소한의 코드로 작성하기 위해서는 Mapper 인터페이스를 사용한다.
	---------------------------------------------------------------------------
	public interface TimeMapper {
		 
		@Select("SELECT SYSDATE FROM DUAL")
		public String getTime();
	
		public String getTime2();
	
	}
	---------------------------------------------------------------------------	

*Mapper.xml
	쿼리가 길어지면 메소드 위에 어노테이션 달고 쿼리문을 쓰기가 힘들어 지기 때문에
	src/main/resource 안에 mapper.xml을 따로 만들어서 쿼리문을 작성해준다.
	---------------------------------------------------------------------------
	<?xml version="1.0" encoding="UTF-8" ?>
	<!DOCTYPE mapper
 	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 	<!-- namespace는 Mapper 인터페이스의 경로를 그대로 써준다 -->
	<mapper namespace="com.springboard.mapper.TimeMapper">
		<!-- com.springboard.mapper.TimeMapper.getTime2 -->
		<!-- 
			id 속성 값은 쿼리를 사용할 때 호출할 메소드의 이름과 동일하게 맞추어야 한다.
			resultType 값은 인터페이스에 선언된 메소드의 리턴 타입과 동일하게 작성한다.
	 	-->
		<select id="getTime2" resultType="string">
			SELECT SYSDATE FROM DUAL
		</select>
	</mapper>
	---------------------------------------------------------------------------

================================================================
# day04 - 스프링 MVC

스프링 MVC 기본 구조
	스프링 프레임워크는 하나의 기능을 위해서만 만들어진 프레임워크가 아닌
	'코어'라고 할 수 있는 여러 서브 프로젝트를 결합해서 다양한 상황에
	대처할 수 있도록 개발되었다. 그 중 하나가 스프링 MVC 구조이다.

	스프링 MVC
	[Spring MVC]	- WEB 관련 영역
	[Spring Core]	- 일반 JAVA 영역(POJO)
	[Spring-Mybatis]
	[Mybatis]
	[DB]

	프로젝트 구동은 web.xml 에서 시작한다. web.xml 상단에는 가장 먼저 구동되는
	Context Listener가 등록되어 있다.
	(Listener : 요청을 보내면 그 요청을 듣는 친구)

	1) ContextLoaderListener는 해당 웹 어플리케이션을 구동하게 되면 같이
	작동이 시작되므로 해당 프로젝트를 실행하면 가장 먼저 로그를 출력하면서 실행된다.
	
	2) root-context.xml이 처리되면 파일에 있는 빈(Bean)들이 작동한다.

	3) root-context.xml이 처리된 후에는 DispatcherServlet이라는 서블릿과
	관련된 설정이 작동한다. MVC구조에서 가장 핵심적인 역할을 하는 클래스이며
	내부적으로 앱 관련 처리의 준비 작업을 진행한다. 내부적으로 웹 관련 처리의 준비
	작업을 진행하기 위해 사용하는 파일이 있고 servlet-context.xml이다.

	4) DispatcherServlet에서 XmlWebApplicationContext를 이용해서
	servlet-context.xml을 로딩하고 해석한다. 이 과정에서 등록된 객체(Bean)들은
	기존에 만들어진 객체(Bean)들과 같이 연동하게 된다.
-----------------------------------------------------------------------------
Front-Controller 패턴
		    HandlerMapping
			↑      ↓
Client -> DispatcherServlet ← HandlerAdapter ↔ Controller
↑	    	      ↓
└──────────View	← ViewResolver

1. 사용자의 Request는 Front-Controller인 DispatcherServlet을 통해 처리한다.

2. HandlerMapping은 Request의 처리를 담당할 컨트롤러를 찾기 위해 존재한다.

3. HandlerMapping 인터페이스를 구현한 여러 객체중 @RequestMapping이라는
어노테이션이 적용된 것을 기준으로 판단하며, 적절한 컨트롤러를 찾았다면 HandlerAdapter를
이용해서 해당 컨트롤러를 동작시킨다.

4. Controller의 처리가 완료되었다면 어디로, 어떻게 갈 것인지 라는 결과가 나오고 그 결과를
ViewResolver가 리턴을 통해 받아서 어떤 View에서 처리하는 것이 좋을지 해석을 해준다.

5. 해석된 결과를 가지고 실제 응답을 보내야 하는 데이터를 JSP 등을 이용해서 생성해준다.

6. 만들어진 응답(페이지)을 DispatcherServlet을 통해서 전송한다.
-----------------------------------------------------------------------------
스프링 MVC Controller의 특징
	HttpServletRequest, HttpServletResponse를 거의 사용할 필요 없이 기능 구현
	다양한 타입의 파라미터 처리, 다양한 타입의 리턴 타입 사용 가능
	GET 방식, POST 방식 등 전송 방식에 대한 처리를 어노테이션으로 처리 가능
	상속/인터페이스 방식 대신 어노테이션으로 설정 가능

================================================================
# day05 - 포스트맨과 Exception처리

Postman(포스트맨)
	여러 방식의 요청을 외부에서 보낼 수 있도록 도와주는 개발툴
	GET,POST 외에도 PUT,DELETE 등의 요청도 가능하다.

Exception 처리
	@ExceptionHandler와 @ControllerAdvice를 이용한 처리
	@ControllerAdvice
		예외 사항을 전부 핸들링해야 한다면 중복적이고 많은 양의 코드를 작성해야 한다
		따라서 공통적인 예외사항에 대해서는 별도로 @ControllerAdvice를
		이용해서 분리한다. 따로 예외들만 분리해서 관리할 수 있게되고
		이것이 AOP를 이용하는 방식이다.

	@ResponseEntity를 이용해서 예외 메세지를 구성할 수 있다.

----------------------------------------------------------
새로운 패키지 추가 연습(ex)예외
CommonExceptionAdvice.java 
-> root-context.xml에
	<context:component-scan base-package="com.springboard.exception" />
추가
-> web.xml > servlet > appServlet의 init-param 아래 
	<init-param>
		<param-name>throwExceptionIfNoHandlerFound</param-name>
		<param-value>true</param-value>
	</init-param>
추가
-----------------------------------------------------------------------------
*어노테이션 정리

@ControllerAdvice
	해당 객체가 스프링의 컨트롤러에서 발생하는 예외를 처리하는 존재임을 명시
-----------------------------------------------------------------------------
500 예외는 문법 오류 발생시 @ExceptionHandler를 이용해서 처리가 가능하지만, 
404 메시지는 오류가 아닌 URL을 잘못 호출했을 때 처리해야 한다. 따라서 서블릿이 web.xml에 간 후
어디로 가야할 지 모를 때 NoHandlerFoundException을 발생시켜 줌으로써 예외가 발생되고
그 예외를 nhfe 객체가 잡아준다. 따라서 404 메세지 대신 원하는 페이지로 응답할 수 있게 된다.
	@ExceptionHandler(NoHandlerFoundException.class)
	@ResponseStatus(HttpStatus.NOT_FOUND)
	public String exception404(NoHandlerFoundException nhfe) {
		return "404_page";
	}

-----------------------------------------------------------------------------

================================================================
# day06 - 익명게시판 mapper test까지(persistence쪽)

스프링 MVC 프로젝트의 기본 구성
	스프링 MVC에서 어떤 단계를 거쳐서 실행되는지를 이해해야
	문제 발생시 빠른 대처와 대안을 찾을 수 있다.
	
	웹 프로젝트는 3-tier(티어) 방식으로 구성한다.

	Presentation tier ↔ Business tier ↔ Persistence tier

Persistence Tier(영속 계층, 데이터 계층)
	데이터를 어떤 방식으로 보관하고, 사용하는가에 대한 설계가 들어가는 계층
	일반적으로 DB를 많이 이용하지만, 상황에 따라서 네트워크 호출 혹은
	원격 호출 등의 기술이 접목된다.
	ex) 크롤링, op.gg -> 게임회사에 데이터가 있기 때문에 데이터를 요청해서 받음. 
	ie) 데이터에 관련된 것은 영속에 속한다고 생각하면 됨

Business Tier(비즈니스 계층)
	순수한 비즈니스 로직을 담고 있는 영역
	고객이 원하는 요구사항을 반영하는 계층이기 때문에 중요한 영역이다.(여기서 고객은 개발을 맡긴 의뢰자)
	이 영역의 설계는 고객의 요구 사항과 정확히 일치해야 하며,
	'~~~Service' 와 같은 이름으로 구성한다.(개발 용어로 이름을 짓지 않음)
	ie) 기능을 구현
	
Presentation Tier(화면 계층)
	화면에 보여주는 기술을 사용하는 영역 
	JSP/Servlet 혹은 스프링MVC가 담당하는 영역이며 화면 구성이 이에 속한다.
	ie) 뷰로 구성하는 영역

결론
	각 영역은 독립적으로 설계되어 나중에 특정한 기술이 변하더라도
	필요한 부분을 전자제품의 부품처럼 쉽게 교환할 수 있게 하자는 방식이다.
	각 연결 부위는 인터페이스를 이용해서 설계하는 것이 일반적이 구성 방식이다.
	테스트 할 때에도 각 영역별로 테스트를 진행함.

	ex) T {
	      f1()
	    }
	    A {
	      f1() {
	      }	
	    }

	    T obj
	    obj.f1();
	    --> 수정 시 T의 f1()을 수정하는 것이 아니라 A에 재구현 되어 있는 f1()을 수정하는것.
	    	스프링에서는 객체를 new로 직접 생성하는 것이 아니라 주입받아서 쓰기 때문에 
		수정 전에는 T의 비즈니스 로직을 주입받고, 수정 후에는 A의 비즈니스 로직을 주입받음.
		다른것에 영향을 미치지 않을 수 있음.
		이것이 세가지 티어의 장점임
-------------------------------------------------------------------------------
익명 게시판 만들기 
	DBeaver -> 디비 만들어주기
	프로젝트 생성해서 기본 셋팅 해주기

	com.springboard.controller > BoardController.java
		컨트롤러임을 알려주기 위해 @Controller
		url 이 /board/* 로 이루어져 있으면 이쪽으로 보내기 위해 @RequestMapping
		url 맵핑해주기 위해  @GetMapping으로 /list를 표시해줌
		db처리해서 Model에 담아서 보내주기 위해 Model타입의 model매개변수 하나 선언 > public void list(Model model)
		model.addAttribute("list",??); 로 디비에서 검색해옴 근데 이제 서비스로 기능구현해둔걸 호출해야함
		
		service패키지 생성 후 BoardService인터페이스 생성 -> list를 검색해서 가져오는 기능 구현 -> DTO도 필요함
		domain패키지 생성 후 BoardDTO 생성
	
	xml파일 에서 부등호를 태그가 아닌 문자로 인식시켜야 할 때(ex 쿼리문 안의 연산자) 
		<![CDATA[
			쿼리문
		]]>
	으로 작성하면 CDATA 괄호 안은 문자로 인식한다

	실제 개발할 때 DB를 다 구현 > Mapper부터 만든다 > root-context에 mybatis-spring:scan 달아줘야함
		<mybatis-spring:scan base-package="com.springboard.mapper"/> 추가하기

	mapper만들었으니 테스트 > test 패키지에 Mapper 패키지 만들어주고 BoardMapperTests 클래스 생성 > private BoardMapper타입의 mapper객체 하나 생성
	> new로 생성하는 것이 아니라 @Setter로 주입받아옴 > 아래에 메소드 하나씩 만들어주기 > 테스트 완료하면 mapper는 완료

	* 계속 junit이 임포트가 안되는 문제가 있어서 이리저리 헤맸는디,,, maven update project만 하면 해결될 문제였음.. 잘 확인하자...
	

-------------------------------------------------------------------------------

================================================================
# day07 - 익명게시판 service

	BoardServiceImpl (BoardService implements받음) > 잘 돌아가는지 테스트로 확인
	-----------------------------------------------------------------------
	BoardServiceTest로 테스트 코드 작성 후 BoardMapper주입받기 -> 주입불가 Be) service객체임을 알려주지 않았음
	>> @Service : 서비스 객체임을 알려줌.이게 없으면 주입받을 수 없음 따라서 ServiceImpl에 @Service 달아주기 
	> Service객체를 찾기 위해서는 스캔을 통해서 찾아야 함 >> root-context에 컴포넌트 스캔 달아주기

	> service Test 돌려주기 > 확인했으면 > controller로 이동
	-----------------------------------------------------------------------	
	BoardController에서는 model에다가 addAttribute를 할건데 이 때 검증이 다 끝난 service객체를 사용하면 됨
	
	service에서 list를 리턴해주면 list.jsp로 화면에 띄우는데 
		여기서 404 에러가 났음...디렉토리 아무리 확인해도 맞는데 왜 404가 뜨지 한참 고민하다가 잠시 딴짓하고 와서 보니 경로가 이상하네...왜 처음엔 못봤을까....
		경로 확인을 잘 하자.!
	-----------------------------------------------------------------------
	service까지 테스트를 완료했음 -> 뷰가 제대로 뜨지 않는다면 컨트롤러 문제 -> 컨트롤러 테스트 
	즉 컨트롤러는 따로 테스트 하지 않아도 뷰가 잘 나오는지 보면 확인 가능

	MockMvcBuilder 라는 인터페이스가 있고, MockMvcBuilders라는 클래스가 있음. 이 점 유의할 것
	-----------------------------------------------------------------------
	BoardControllerTest - {list=[BoardDTO(boardnum=1, boardtitle=테스트 제목1, boardcontents=테스트 내용1, boardwriter=apple, ...
		:) BoardControllerTest에서 리스트 제대로 달려있고
	.BoardControllerTest - board/list
		:) name 도 제대로 달려있음
	==> controllerTest 이상없음
	-----------------------------------------------------------------------
	실제로 개발할 때 순서
	mapper부터 작성
	DB -> 쿼리문 -> mapper -> service -> controller -> 수정버튼클릭
	-----------------------------------------------------------------------
mapper만들기
	mapper 인터페이스 말고 xml으로 따로 쿼리문을 빼기로 결정함
	main/resource에 mapper패키지 만들어준 후 그 아래에 Boardmapper.xml 생성
	root-context.xml에 Scan 과 SqlFactory 등록해줬는지 확인.
	BoardMapper인터페이스에 필요한 쿼리 id이름으로 메소드 선언
	BoardMapper.xml에 쿼리문 작성
	BoardMapperTests에 테스트코드 작성
	-----------------------------------------------------------------------
	selectKey order="BEFORE" : 아래에 있는 쿼리문을 수행하기 전에 해당 쿼리문을 한번 수행한다.
	resultType(Long)는 수행된 결과의 타입이며 그 결과를 "boardnum" 이라는 이름에 세팅
	-> mybatis 기본 제공 기능, order="BEFORE"면 기존 쿼리문 앞에 붙여서 실행된 selectKey의 값을 
	   바로 쿼리문에 세팅해서 쓸 수 있음.

	해당 작성자가 작성한 boardnum중 가장 큰 번호로 가져왔던 최근 게시글을
	selectKey를 사용하면
	방금 등록된 boardnum을 바로 객체에 세팅해서 쓸 수 있기 때문에 boardnum을 바로 꺼내서 쓸 수 있음.
	
	





================================================================








================================================================