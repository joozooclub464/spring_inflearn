spring
================================================================
#day01 - 스프링 프레임워크

프레임워크
	뼈대나 근간을 이루는 코드들의 묶음
	개발자는 각 개개인의 능력차이가 큰 직종이고, 개발자 구성에 따라 프로젝트의 
	결과 역시 큰 차이를 낳는다. 이런 상황을 극복하기 위한 코드의 결과물이
	바로 프레임워크이다. 프로그램의 기본 흐름이나 구조를 정하고 모든 팀원들이
	이 구조에 자신의 코드를 추가하는 방법으로 개발.
	
프레임워크의 장점
	일정한 개발 품질 보장
	개발 시간 단축
	반쯤 완성된 상태에서 필요한 부분을 조립하는 형태의 개발

스프링 프레임워크
	경량 프레임워크(light-weight)
	특정 기능을 위주로 간단한 JAR파일 등을 이용해서
	모든 개발이 가능하도록 구성되어 있다.

스프링 프레임워크의 장점
	복잡함에 반기를 들어서 만들어진 프레임워크
	프로젝트 전체 구조를 설계할 때 유용한 프레임워크
	다른 프레임워크들의 포용(여러 프레임워크를 혼용해서 사용 가능 - 접착성)
	개발 생산성과 개발도구의 지원

스프링 프레임워크의 특징
	-POJO 기반의 구성
	-의존성 주입(DI)를 통한 객체 간의 관계 구성
	-AOP(Aspect-Oriented-Programing) 지원
	-편리한 MVC 구조
	-WAS 종속적이지 않은 개발 환경

POJO(Plain Old Java Object)
	오래된 방식의 간단한 자바 객체 라는 의미 
	JAVA 코드에서 일반적으로 객체를 구성하는 방식을 스프링 프레임워크에서 그대로 사용할 수 있다는 말이다.
	
의존성 주입(DI)
	Dependency Injection
	의존성(Dependency)이란 하나의 객체가 다른 객체 없이 제대로 된 역할을
	할 수 없다는 것을 의미한다. 예를 들어 a 객체가 b 객체 없이 동작이 
	불가능한 상황을 'a가 b에 의존적이다'라고 표현한다.
	
	의존성을 주입하면 의존성이 줄어든다!!!
	(기존에는 없던 의존성을 외부에서 주입해주면 이 방법이 오히려 내부에서 하는것보다 의존성이 줄어든다)

	주입(Injection)은 말 그대로 외부에서 밀어 넣는것을 의미한다. 예를 들어
	a 객체가 필요로 하는 b 객체를 외부에서 밀어 넣는것을 의미한다. 주입을 받는
	입장에서는 어떤 객체인지 신경 쓸 필요가 없고 어떤 객체에 의존하든 자신의
	역할은 변하지 않게 된다.

	*의존
	a---------------> b
	a객체에서 b객체를 직접 생성

	*의존성 주입
	a----->ApplicationContext<----- b
	a객체는 b가 필요하다는 신호만 보내고, b객체를 주입하는 것은 외부에서 이루어짐

	스프링 프레임워크에서는 ApplicationContext가 필요한 객체들을 생성하고 의존성 주입까지 해주는 역할.(Context:문맥)
	따라서 개발자들은 기존의 프로그래밍과 달리 객체와 객체를 분리해서 생성하고, 
	이러한 객체들을 엮는(wiring) 작업의 형태로 개발하게 된다.
	ApplicationContext가 관리하는 객체들을 빈(bean)이라 부르고, 
	빈과 빈 사이의 의존 관계를 처리하는 방식으로 XML 설정, 어노테이션 설정,
	JAVA설정 방식을 이용할 수 있다.(미리 설정하기)
	
AOP(Aspect Oriented Programing)
	관점 지향 프로그래밍
	보안이나 로그, 트랜잭션과 같이 비즈니스 로직은
	아니지만 반드시 처리가 필요한 부분을 횡단 관심사(cross-concern)라고 한다.
	스프링 프레임워크는 이러한 횡단 관심사를 분리해서 제작하는 것이 가능하고
	횡단 관심사를 모듈로 분리하는 프로그래밍을 AOP라고 한다.
	1) 반복적인 코드 제거하여 핵심 비즈니스 로직에만 집중하여 코드 개발
	2) 각 프로젝트마다 다른 관심사 적용시 코드 수정 최소화
	3) 원하는 관심사의 유지보수가 수월한 코드 구성이 가능

트랜잭션의 지원	
	DB작업시 어노테이션이나 XML로 트랜잭션 관리를 설정할 수 있다.

STS(Spring Tool Suite) 설치

프로젝트 생성(Maven)
	Maven은 프로젝트 관리 도구의 일종이다. Maven은 필요한 라이브러리를
	특정 문서(pom.xml)에 정의해 놓으면 내가 사용할 라이브러리 뿐만 아니라
	해당 라이브러리가 작동하는데에 필요한 다른 라이브러리들 까지 관리하여 
	네트워크를 통해서 자동으로 다운받아 준다.


Lombok 라이브러리 설치
	이클립스와 스프링 플러그인 만으로도 스프링 개발이 가능하지만, 
	Lombok(롬복)을 이용하면 Java 개발시 getter/setter, toString(),
	생성자 등을 자동으로 생성해주므로 설치해서 사용하면 편리하다.
================================================================
#day02 - 스프링 구동 원리

프로젝트 기본 구성 요소
	src/main/java		작성되는 코드의 경로
	src/main/resource	실행할 때 참고하는 기본 경로(설정 파일)
	src/test/java		테스트 코드를 넣는 경로
	src/test/resource	테스트 관련 설정 파일 보관 경로

웹과 관련된 스프링 설정 파일
src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml

bean 관리용 스프링 설정 파일
src/main/webapp/WEB-INF/spring/root-context.xml
=> 주입해줘야 하는 파일의 경우 여기에 적힌 태그들을 참고해서 외부에서 객체를 찾아서 주입해줌

Tomcat의 web.xml파일
WEB-INF/web.xml

템플릿 프로젝트의 jsp 파일 경로
src/main/webapp/WEB-INF/views

Maven이 사용하는 pom.xml
ex00/pom.xml

* WEB-INF : INF가 붙어있는 폴더는 보안이 걸려있는 폴더임(직접 접근하는것이 불가능하게 막혀있는 폴더임)

라이브러리 오류 발생시 C 드라이브 > 사용자 > 계정폴더 > .m2폴더 안의 내용 싹 지우기
> 이클립스 재시작 > 프로젝트 우클릭 > Maven > Update Project
---------------------------------------------------------------
의존성 주입 테스트(연습)
	호텔, 레스토랑 안에 셰프 객체를 주입하는 예제
	생성자, setter 메소드를 이용한 주입으로 의존성 주입 구현
	설정 방식은 XML이나 어노테이션을 이용해서 처리

스프링 프레임워크 동작시 생기는 일
	1. 스프링 프레임워크가 시작되면서 먼저 스프링이 사용하는 메모리 영역을 만든다.
	2. 스프링 내부적으로 ApplicationContext라는 이름의 객체가 만들어진다.
	3. 스프링은 자신이 생성하고 관리해야 하는 객체들에 대한 설정을 알아야 하고
	   이 설정파일은 root-context.xml 이라는 파일로 만들어져 있다.
	4. root-context.xml에 설정되어 있는 <context:component-scan>
	   태그의 내용을 통해서 com.koreait.sample 패키지를 스캔하기 시작한다.
	5. 해당 패키지에 있는 클래스들 중에서 스프링이 사용하는 @Component라는
	   어노테이션이 존재하는 클래스의 인스턴스를 생성한다. 
	6. Restaurant 객체는 Chef 객체가 필요하다는 어노테이션(@Autowired) 설정이 있으므로
	   Chef 객체의 레퍼런스를 Restaurant 객체에 주입한다.

테스트 환경(JUnit)
	자바 프로그래밍 언어용 유닛 테스트 프레임워크
	가장 많이 사용되는 테스트 환경
	assert???() (이런 이름의 메소드가 가장 많이 사용됨)
	테스트 성공시 JUnit GUI 창에 녹색으로 표시 / 실패시 적색으로 표시
	하나하나의 케이스별로(단위로 나누어서) 테스트를 하는 단위 테스트 도구

테스트 환경 구축하기
	1. 테스트 클래스 위쪽에 어노테이션 추가
		@RunWith(SpringJUnit4ClassRunner.class)
	2. 내부에 테스트용 메소드 선언
		- 내부에는 우리가 테스트 해볼 로직을 구현
	3. 테스트용 메소드 위에 어노테이션 추가
		@Test
	4. 테스트 실행
		테스트클래스 > 우클릭 > Run As > JUnit Test 

spring이 Component붙은 것을 찾으려면 root-context.xml에 등록되어있는 beans중에서 component를 찾음
-> ie)root-context.xml 의 beans 안에 component를 등록해줘야 함
-----------------------------------------------------------------------------
*어노테이션 정리

@Component 
	spring에게 해달 클래스가 스프링에서 관리해야 하는 대상임을 표시하는 어노테이션
	주입해줘야 할 것을 스프링에게 알려주는 어노테이션.

@Data
	Lombok의 setter,getter,toString() 등을 자동으로 생성해주는 어노테이션

@AllArgsConstructor
	인스턴스 변수로 선언된 모든 것을 파라미터로 받는 생성자를 작성한다.
	등록되어있는 Chef타입의 chef 하나를 만들어서 주입해줌.

@RequiredArgsConstructor
	특정 변수를 위한 생성자를 만들 때 작성. final이 붙거나 @NonNull이 붙은 인스턴스 변수에 대한 생성자를 만들어낸다.
	ie) 어떤건 주입이 필요하고 어떤건 필요 없을 때(주입이 일어나지 않게 할 때)

@NonNull
	@RequiredArgsConstructor가 NonNull에 대한 chef 하나를 받아오는 생성자로 생성이 됨

@Setter(onMethod_ = @Autowired)
	set chef를 이용해서 주입할건데, 자동으로 연결되어 있는걸로 주입해줘

@RunWith(SpringJUnit4ClassRunner.class)
	지정된 클래스나 문자열을 이용해서 필요한 객체들을 스프링 내에 객체로 등록

@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
	rootcontext가 어디있는지 test클래스에서 알려주는 것

@Log4j
	롬복에 존재하는 로그를 찍기 위한 라이브러리

@Test
	JUnit에서 테스트 대상임을 표시(반드시 public으로 만들어야 함)

-----------------------------------------------------------------------------



================================================================